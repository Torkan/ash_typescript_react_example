defmodule AshTypescriptReactExample.Repo.Migrations.CreateInvoicingTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:sequence_numbers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "sequence_numbers_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ), null: false

      add :document_type, :text, null: false
      add :next_number, :bigint, null: false, default: 1

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:sequence_numbers, [:user_id, :document_type], unique: true)

    create unique_index(:sequence_numbers, [:user_id, :document_type],
             name: "sequence_numbers_unique_user_document_type_index"
           )

    create table(:invoices, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "invoices_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ), null: false

      add :serial_number, :text
      add :state, :text, null: false, default: "draft"
      add :issue_date, :date, null: false
      add :due_date, :date, null: false
      add :company_name, :text, null: false
      add :company_address_line_1, :text, null: false
      add :company_address_line_2, :text
      add :company_city, :text, null: false
      add :company_postal_code, :text, null: false
      add :company_country, :text, null: false
      add :company_vat_number, :text
      add :company_email, :text
      add :company_phone, :text
      add :customer_name, :text, null: false
      add :customer_address_line_1, :text, null: false
      add :customer_address_line_2, :text
      add :customer_city, :text, null: false
      add :customer_postal_code, :text, null: false
      add :customer_country, :text, null: false
      add :customer_vat_number, :text
      add :customer_email, :text
      add :customer_phone, :text
      add :currency, :text, null: false, default: "NOK"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:invoices, [:user_id, :serial_number],
             unique: true,
             where: "serial_number IS NOT NULL"
           )

    create index(:invoices, [:user_id, :issue_date])

    create index(:invoices, [:user_id, :serial_number])

    create index(:invoices, [:user_id, :state])

    create index(:invoices, [:user_id])

    create table(:invoice_lines, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :invoice_id,
          references(:invoices,
            column: :id,
            name: "invoice_lines_invoice_id_fkey",
            type: :uuid,
            prefix: "public"
          ), null: false

      add :line_number, :bigint, null: false
      add :description, :text, null: false
      add :quantity, :decimal, null: false, default: "1"
      add :unit_price, :decimal, null: false
      add :tax_rate, :decimal, null: false, default: "0"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:invoice_lines, [:invoice_id, :line_number], unique: true)

    create index(:invoice_lines, [:invoice_id])

    create unique_index(:invoice_lines, [:invoice_id, :line_number],
             name: "invoice_lines_unique_invoice_line_number_index"
           )

    create table(:customers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "customers_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ), null: false

      add :name, :text, null: false
      add :address_line_1, :text, null: false
      add :address_line_2, :text
      add :city, :text, null: false
      add :postal_code, :text, null: false
      add :country, :text, null: false
      add :vat_number, :text
      add :email, :text
      add :phone, :text
      add :is_active, :boolean, null: false, default: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:customers, [:user_id, :is_active])

    create index(:customers, [:user_id])

    create table(:credit_notes, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "credit_notes_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ), null: false

      add :serial_number, :text
      add :state, :text, null: false, default: "draft"
      add :issue_date, :date, null: false

      add :original_invoice_id,
          references(:invoices,
            column: :id,
            name: "credit_notes_original_invoice_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :credit_reason, :text, null: false
      add :company_name, :text, null: false
      add :company_address_line_1, :text, null: false
      add :company_address_line_2, :text
      add :company_city, :text, null: false
      add :company_postal_code, :text, null: false
      add :company_country, :text, null: false
      add :company_vat_number, :text
      add :company_email, :text
      add :company_phone, :text
      add :customer_name, :text, null: false
      add :customer_address_line_1, :text, null: false
      add :customer_address_line_2, :text
      add :customer_city, :text, null: false
      add :customer_postal_code, :text, null: false
      add :customer_country, :text, null: false
      add :customer_vat_number, :text
      add :customer_email, :text
      add :customer_phone, :text
      add :currency, :text, null: false, default: "NOK"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:credit_notes, [:user_id, :serial_number],
             unique: true,
             where: "serial_number IS NOT NULL"
           )

    create index(:credit_notes, [:user_id, :original_invoice_id])

    create index(:credit_notes, [:user_id, :issue_date])

    create index(:credit_notes, [:user_id, :serial_number])

    create index(:credit_notes, [:user_id, :state])

    create index(:credit_notes, [:user_id])

    create table(:credit_note_lines, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :credit_note_id,
          references(:credit_notes,
            column: :id,
            name: "credit_note_lines_credit_note_id_fkey",
            type: :uuid,
            prefix: "public"
          ), null: false

      add :line_number, :bigint, null: false
      add :description, :text, null: false
      add :quantity, :decimal, null: false, default: "1"
      add :unit_price, :decimal, null: false
      add :tax_rate, :decimal, null: false, default: "0"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:credit_note_lines, [:credit_note_id, :line_number], unique: true)

    create index(:credit_note_lines, [:credit_note_id])

    create unique_index(:credit_note_lines, [:credit_note_id, :line_number],
             name: "credit_note_lines_unique_credit_note_line_number_index"
           )

    create table(:companies, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "companies_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ), null: false

      add :name, :text, null: false
      add :address_line_1, :text, null: false
      add :address_line_2, :text
      add :city, :text, null: false
      add :postal_code, :text, null: false
      add :country, :text, null: false
      add :vat_number, :text
      add :email, :text
      add :phone, :text
      add :is_default, :boolean, null: false, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:companies, [:user_id, :is_default])

    create index(:companies, [:user_id])
  end

  def down do
    drop constraint(:companies, "companies_user_id_fkey")

    drop_if_exists index(:companies, [:user_id])

    drop_if_exists index(:companies, [:user_id, :is_default])

    drop table(:companies)

    drop_if_exists unique_index(:credit_note_lines, [:credit_note_id, :line_number],
                     name: "credit_note_lines_unique_credit_note_line_number_index"
                   )

    drop constraint(:credit_note_lines, "credit_note_lines_credit_note_id_fkey")

    drop_if_exists index(:credit_note_lines, [:credit_note_id])

    drop_if_exists index(:credit_note_lines, [:credit_note_id, :line_number])

    drop table(:credit_note_lines)

    drop constraint(:credit_notes, "credit_notes_user_id_fkey")

    drop constraint(:credit_notes, "credit_notes_original_invoice_id_fkey")

    drop_if_exists index(:credit_notes, [:user_id])

    drop_if_exists index(:credit_notes, [:user_id, :state])

    drop_if_exists index(:credit_notes, [:user_id, :serial_number])

    drop_if_exists index(:credit_notes, [:user_id, :issue_date])

    drop_if_exists index(:credit_notes, [:user_id, :original_invoice_id])

    drop_if_exists index(:credit_notes, [:user_id, :serial_number])

    drop table(:credit_notes)

    drop constraint(:customers, "customers_user_id_fkey")

    drop_if_exists index(:customers, [:user_id])

    drop_if_exists index(:customers, [:user_id, :is_active])

    drop table(:customers)

    drop_if_exists unique_index(:invoice_lines, [:invoice_id, :line_number],
                     name: "invoice_lines_unique_invoice_line_number_index"
                   )

    drop constraint(:invoice_lines, "invoice_lines_invoice_id_fkey")

    drop_if_exists index(:invoice_lines, [:invoice_id])

    drop_if_exists index(:invoice_lines, [:invoice_id, :line_number])

    drop table(:invoice_lines)

    drop constraint(:invoices, "invoices_user_id_fkey")

    drop_if_exists index(:invoices, [:user_id])

    drop_if_exists index(:invoices, [:user_id, :state])

    drop_if_exists index(:invoices, [:user_id, :serial_number])

    drop_if_exists index(:invoices, [:user_id, :issue_date])

    drop_if_exists index(:invoices, [:user_id, :serial_number])

    drop table(:invoices)

    drop_if_exists unique_index(:sequence_numbers, [:user_id, :document_type],
                     name: "sequence_numbers_unique_user_document_type_index"
                   )

    drop constraint(:sequence_numbers, "sequence_numbers_user_id_fkey")

    drop_if_exists index(:sequence_numbers, [:user_id, :document_type])

    drop table(:sequence_numbers)
  end
end
